---
# Source: nri-bundle/charts/kube-state-metrics/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/name: kube-state-metrics
    helm.sh/chart: kube-state-metrics-2.9.7
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: newrelic-bundle
  name: newrelic-bundle-kube-state-metrics
  namespace: platform
imagePullSecrets:
  []
---
# Source: nri-bundle/charts/newrelic-infrastructure/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: platform
  labels:
    app: newrelic-infrastructure
    chart: newrelic-infrastructure-2.3.1
    heritage: "Helm"
    release: "newrelic-bundle"
  annotations:
    null
  name: newrelic-bundle-newrelic-infrastructure
---
# Source: nri-bundle/charts/newrelic-logging/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: platform
  labels:
    app: newrelic-logging
    chart: newrelic-logging-1.4.6
    heritage: "Helm"
    release: "newrelic-bundle"
  annotations:
  name: newrelic-bundle-newrelic-logging
---
# Source: nri-bundle/charts/nri-kube-events/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: nri-kube-events
    app.kubernetes.io/name: nri-kube-events
    helm.sh/chart: nri-kube-events-1.7.0
    app.kubernetes.io/instance: newrelic-bundle
    app.kubernetes.io/version: "1.4.0"
    app.kubernetes.io/managed-by: Helm
  name: newrelic-bundle-nri-kube-events
  namespace: platform
  annotations:
    null
---
# Source: nri-bundle/charts/nri-metadata-injection/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: newrelic-bundle-nri-metadata-injection
  namespace: platform
  labels:
    app.kubernetes.io/name: nri-metadata-injection
    helm.sh/chart: nri-metadata-injection-1.3.5
    app.kubernetes.io/instance: newrelic-bundle
    app.kubernetes.io/version: "1.3.2"
    app.kubernetes.io/managed-by: Helm
---
# Source: nri-bundle/charts/nri-prometheus/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nri-prometheus
  namespace: platform
  labels:
    app.kubernetes.io/name: nri-prometheus
    helm.sh/chart: nri-prometheus-1.6.2
    app.kubernetes.io/instance: newrelic-bundle
    app.kubernetes.io/version: "2.4.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    null
---
# Source: nri-bundle/charts/newrelic-logging/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: platform
  labels:     
    app: newrelic-logging
    chart: newrelic-logging-1.4.6
    heritage: Helm
    release: newrelic-bundle
    app.kubernetes.io/name: newrelic-logging
  name: newrelic-bundle-newrelic-logging-fluent-bit-config
data:
  # Configuration files: server, input, filters and output
  # ======================================================
  fluent-bit.conf: |
    [SERVICE]
        Flush         1
        Log_Level     ${LOG_LEVEL}
        Daemon        off
        Parsers_File  parsers.conf
        HTTP_Server   On
        HTTP_Listen   0.0.0.0
        HTTP_Port     2020

    @INCLUDE input-kubernetes.conf
    @INCLUDE output-newrelic.conf
    @INCLUDE filter-kubernetes.conf

  input-kubernetes.conf: |
    [INPUT]
        Name              tail
        Tag               kube.*
        Path              ${PATH}
        Parser            ${LOG_PARSER}
        DB                /var/log/flb_kube.db
        Mem_Buf_Limit     7MB
        Skip_Long_Lines   On
        Refresh_Interval  10

  filter-kubernetes.conf: |
    [FILTER]
        Name           record_modifier
        Match          *
        Record         cluster_name ${CLUSTER_NAME}

    [FILTER]
        Name           kubernetes
        Match          kube.*
        Kube_URL       https://kubernetes.default.svc:443
        K8S-Logging.Exclude ${K8S_LOGGING_EXCLUDE}

  output-newrelic.conf: |
    [OUTPUT]
        Name  newrelic
        Match *
        licenseKey ${LICENSE_KEY}
        endpoint ${ENDPOINT}

  parsers.conf: |
    # Relevant parsers retrieved from: https://github.com/fluent/fluent-bit/blob/master/conf/parsers.conf
    [PARSER]
        Name         docker
        Format       json
        Time_Key     time
        Time_Format  %Y-%m-%dT%H:%M:%S.%L
        Time_Keep    On

    [PARSER]
        Name cri
        Format regex
        Regex ^(?<time>[^ ]+) (?<stream>stdout|stderr) (?<logtag>[^ ]*) (?<message>.*)$
        Time_Key    time
        Time_Format %Y-%m-%dT%H:%M:%S.%L%z
---
# Source: nri-bundle/charts/nri-kube-events/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
data:
  config.yaml: |-
    sinks:
    - name: newRelicInfra
      config:
        agentEndpoint: http://localhost:8001/v1/data
        clusterName: nightstone
        agentHTTPTimeout: 30s
metadata:
  name: newrelic-bundle-nri-kube-events-config
  namespace: platform
  labels:
    app: nri-kube-events
    app.kubernetes.io/name: nri-kube-events
    helm.sh/chart: nri-kube-events-1.7.0
    app.kubernetes.io/instance: newrelic-bundle
    app.kubernetes.io/version: "1.4.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: nri-bundle/charts/nri-prometheus/templates/configmap.yaml
kind: ConfigMap
metadata:
  name: newrelic-bundle-nri-prometheus-config
  namespace: platform
  labels:
    app.kubernetes.io/name: nri-prometheus
    helm.sh/chart: nri-prometheus-1.6.2
    app.kubernetes.io/instance: newrelic-bundle
    app.kubernetes.io/version: "2.4.0"
    app.kubernetes.io/managed-by: Helm
apiVersion: v1
data:
  config.yaml: |
    cluster_name: nightstone
    audit: false
    insecure_skip_verify: false
    require_scrape_enabled_label_for_nodes: true
    scrape_enabled_label: prometheus.io/scrape
    verbose: false
---
# Source: nri-bundle/charts/kube-state-metrics/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/name: kube-state-metrics
    helm.sh/chart: kube-state-metrics-2.9.7
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: newrelic-bundle
  name: newrelic-bundle-kube-state-metrics
rules:

- apiGroups: ["certificates.k8s.io"]
  resources:
  - certificatesigningrequests
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - configmaps
  verbs: ["list", "watch"]

- apiGroups: ["batch"]
  resources:
  - cronjobs
  verbs: ["list", "watch"]

- apiGroups: ["extensions", "apps"]
  resources:
  - daemonsets
  verbs: ["list", "watch"]

- apiGroups: ["extensions", "apps"]
  resources:
  - deployments
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - endpoints
  verbs: ["list", "watch"]

- apiGroups: ["autoscaling"]
  resources:
  - horizontalpodautoscalers
  verbs: ["list", "watch"]

- apiGroups: ["extensions", "networking.k8s.io"]
  resources:
  - ingresses
  verbs: ["list", "watch"]

- apiGroups: ["batch"]
  resources:
  - jobs
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - limitranges
  verbs: ["list", "watch"]

- apiGroups: ["admissionregistration.k8s.io"]
  resources:
    - mutatingwebhookconfigurations
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - namespaces
  verbs: ["list", "watch"]

- apiGroups: ["networking.k8s.io"]
  resources:
  - networkpolicies
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - nodes
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - persistentvolumeclaims
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - persistentvolumes
  verbs: ["list", "watch"]

- apiGroups: ["policy"]
  resources:
    - poddisruptionbudgets
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - pods
  verbs: ["list", "watch"]

- apiGroups: ["extensions", "apps"]
  resources:
  - replicasets
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - replicationcontrollers
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - resourcequotas
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - secrets
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - services
  verbs: ["list", "watch"]

- apiGroups: ["apps"]
  resources:
  - statefulsets
  verbs: ["list", "watch"]

- apiGroups: ["storage.k8s.io"]
  resources:
    - storageclasses
  verbs: ["list", "watch"]

- apiGroups: ["admissionregistration.k8s.io"]
  resources:
    - validatingwebhookconfigurations
  verbs: ["list", "watch"]

- apiGroups: ["storage.k8s.io"]
  resources:
    - volumeattachments
  verbs: ["list", "watch"]
---
# Source: nri-bundle/charts/newrelic-infrastructure/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:     
    app: newrelic-infrastructure
    chart: newrelic-infrastructure-2.3.1
    heritage: Helm
    release: newrelic-bundle
    mode: privileged
  name: newrelic-bundle-newrelic-infrastructure
rules:
  - apiGroups: [""]
    resources:
      - "nodes"
      - "nodes/metrics"
      - "nodes/stats"
      - "nodes/proxy"
      - "pods"
      - "services"
    verbs: ["get", "list"]
  - nonResourceURLs: ["/metrics"]
    verbs: ["get"]
---
# Source: nri-bundle/charts/newrelic-logging/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:     
    app: newrelic-logging
    chart: newrelic-logging-1.4.6
    heritage: Helm
    release: newrelic-bundle
    app.kubernetes.io/name: newrelic-logging
  name: newrelic-bundle-newrelic-logging
rules:
  - apiGroups: [""]
    resources:
      - namespaces
      - pods
    verbs: ["get", "list", "watch"]
---
# Source: nri-bundle/charts/nri-kube-events/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app: nri-kube-events
    app.kubernetes.io/name: nri-kube-events
    helm.sh/chart: nri-kube-events-1.7.0
    app.kubernetes.io/instance: newrelic-bundle
    app.kubernetes.io/version: "1.4.0"
    app.kubernetes.io/managed-by: Helm
  name: newrelic-bundle-nri-kube-events
rules:
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["get", "watch", "list"]
---
# Source: nri-bundle/charts/nri-metadata-injection/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: newrelic-bundle-nri-metadata-injection
  labels:
    app.kubernetes.io/name: nri-metadata-injection
    helm.sh/chart: nri-metadata-injection-1.3.5
    app.kubernetes.io/instance: newrelic-bundle
    app.kubernetes.io/version: "1.3.2"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups: ["admissionregistration.k8s.io"]
    resources: ["mutatingwebhookconfigurations"]
    verbs: ["get", "create", "patch"]
  - apiGroups: ["certificates.k8s.io"]
    resources: ["certificatesigningrequests"]
    verbs: ["create", "get", "delete"]
  - apiGroups: ["certificates.k8s.io"]
    resources: ["certificatesigningrequests/approval"]
    verbs: ["update"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["create", "get", "patch"]
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get"]
  - apiGroups: ["certificates.k8s.io"]
    resources:
      - "signers"
    resourceNames:
      - "kubernetes.io/legacy-unknown"
    verbs: ["approve"]
---
# Source: nri-bundle/charts/nri-prometheus/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: newrelic-bundle-nri-prometheus
  labels:
    app.kubernetes.io/name: nri-prometheus
    helm.sh/chart: nri-prometheus-1.6.2
    app.kubernetes.io/instance: newrelic-bundle
    app.kubernetes.io/version: "2.4.0"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups: [""]
  resources:
    - "nodes"
    - "nodes/metrics"
    - "nodes/stats"
    - "nodes/proxy"
    - "pods"
    - "services"
  verbs: ["get", "list", "watch"]
- nonResourceURLs:
  - /metrics
  verbs:
  - get
---
# Source: nri-bundle/charts/kube-state-metrics/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/name: kube-state-metrics
    helm.sh/chart: kube-state-metrics-2.9.7
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: newrelic-bundle
  name: newrelic-bundle-kube-state-metrics
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: newrelic-bundle-kube-state-metrics
subjects:
- kind: ServiceAccount
  name: newrelic-bundle-kube-state-metrics
  namespace: platform
---
# Source: nri-bundle/charts/newrelic-infrastructure/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:     
    app: newrelic-infrastructure
    chart: newrelic-infrastructure-2.3.1
    heritage: Helm
    release: newrelic-bundle
    mode: privileged
  name: newrelic-bundle-newrelic-infrastructure
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: newrelic-bundle-newrelic-infrastructure
subjects:
- kind: ServiceAccount
  name: newrelic-bundle-newrelic-infrastructure
  namespace: platform
---
# Source: nri-bundle/charts/newrelic-logging/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:     
    app: newrelic-logging
    chart: newrelic-logging-1.4.6
    heritage: Helm
    release: newrelic-bundle
    app.kubernetes.io/name: newrelic-logging
  name: newrelic-bundle-newrelic-logging
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: newrelic-bundle-newrelic-logging
subjects:
- kind: ServiceAccount
  name: newrelic-bundle-newrelic-logging
  namespace: platform
---
# Source: nri-bundle/charts/nri-kube-events/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app: nri-kube-events
    app.kubernetes.io/name: nri-kube-events
    helm.sh/chart: nri-kube-events-1.7.0
    app.kubernetes.io/instance: newrelic-bundle
    app.kubernetes.io/version: "1.4.0"
    app.kubernetes.io/managed-by: Helm
  name: newrelic-bundle-nri-kube-events
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: newrelic-bundle-nri-kube-events
subjects:
- kind: ServiceAccount
  name: newrelic-bundle-nri-kube-events
  namespace: platform
---
# Source: nri-bundle/charts/nri-metadata-injection/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: newrelic-bundle-nri-metadata-injection
  labels:
    app.kubernetes.io/name: nri-metadata-injection
    helm.sh/chart: nri-metadata-injection-1.3.5
    app.kubernetes.io/instance: newrelic-bundle
    app.kubernetes.io/version: "1.3.2"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: newrelic-bundle-nri-metadata-injection
subjects:
  - kind: ServiceAccount
    name: newrelic-bundle-nri-metadata-injection
    namespace: platform
---
# Source: nri-bundle/charts/nri-prometheus/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: newrelic-bundle-nri-prometheus
  labels:
    app.kubernetes.io/name: nri-prometheus
    helm.sh/chart: nri-prometheus-1.6.2
    app.kubernetes.io/instance: newrelic-bundle
    app.kubernetes.io/version: "2.4.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: newrelic-bundle-nri-prometheus
subjects:
- kind: ServiceAccount
  name: nri-prometheus
  namespace: platform
---
# Source: nri-bundle/charts/kube-state-metrics/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: newrelic-bundle-kube-state-metrics
  namespace: platform
  labels:
    app.kubernetes.io/name: kube-state-metrics
    helm.sh/chart: "kube-state-metrics-2.9.7"
    app.kubernetes.io/instance: "newrelic-bundle"
    app.kubernetes.io/managed-by: "Helm"
  annotations:
    prometheus.io/scrape: 'true'
spec:
  type: "ClusterIP"
  ports:
  - name: "http"
    protocol: TCP
    port: 8080
    targetPort: 8080
  selector:
    app.kubernetes.io/name: kube-state-metrics
    app.kubernetes.io/instance: newrelic-bundle
---
# Source: nri-bundle/charts/nri-metadata-injection/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: newrelic-bundle-nri-metadata-injection
  namespace: platform
  labels:
    app.kubernetes.io/name: nri-metadata-injection
    helm.sh/chart: nri-metadata-injection-1.3.5
    app.kubernetes.io/instance: newrelic-bundle
    app.kubernetes.io/version: "1.3.2"
    app.kubernetes.io/managed-by: Helm
spec:
  ports:
  - port: 443
    targetPort: 8443
  selector:
    app.kubernetes.io/name: nri-metadata-injection
---
# Source: nri-bundle/charts/newrelic-infrastructure/templates/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  namespace: platform
  labels:     
    app: newrelic-infrastructure
    chart: newrelic-infrastructure-2.3.1
    heritage: Helm
    release: newrelic-bundle
    mode: privileged
  name: newrelic-bundle-newrelic-infrastructure
  annotations:
spec:
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: newrelic-infrastructure
      release: newrelic-bundle
  template:
    metadata:
      labels:
        app: newrelic-infrastructure
        release: newrelic-bundle
        mode: privileged
    spec:
      serviceAccountName: newrelic-bundle-newrelic-infrastructure
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      containers:
        - name: newrelic-infrastructure
          image: "newrelic/infrastructure-k8s:2.3.0"
          imagePullPolicy: "IfNotPresent"
          securityContext:
            privileged: true
          env:
            - name: NRIA_LICENSE_KEY
              valueFrom:
                secretKeyRef:
                  name: newrelic-license-key
                  key: newrelic-license-key
            - name: "CLUSTER_NAME"
              value: nightstone
            - name: "NRK8S_NODE_NAME"
              valueFrom:
                fieldRef:
                  apiVersion: "v1"
                  fieldPath: "spec.nodeName"
            - name: "NRIA_DISPLAY_NAME"
              valueFrom:
                fieldRef:
                  apiVersion: "v1"
                  fieldPath: "spec.nodeName"
            - name: "NRIA_CUSTOM_ATTRIBUTES"
              value: '{"clusterName":"$(CLUSTER_NAME)"}'
            - name: "NRIA_PASSTHROUGH_ENVIRONMENT"
              value: "KUBERNETES_SERVICE_HOST,KUBERNETES_SERVICE_PORT,CLUSTER_NAME,CADVISOR_PORT,NRK8S_NODE_NAME,KUBE_STATE_METRICS_URL,KUBE_STATE_METRICS_POD_LABEL,TIMEOUT,ETCD_TLS_SECRET_NAME,ETCD_TLS_SECRET_NAMESPACE,API_SERVER_SECURE_PORT,KUBE_STATE_METRICS_SCHEME,KUBE_STATE_METRICS_PORT,SCHEDULER_ENDPOINT_URL,ETCD_ENDPOINT_URL,CONTROLLER_MANAGER_ENDPOINT_URL,API_SERVER_ENDPOINT_URL,DISABLE_KUBE_STATE_METRICS,DISCOVERY_CACHE_TTL"
          volumeMounts:
            - name: dev
              mountPath: /dev
            - name: host-docker-socket
              mountPath: /var/run/docker.sock
            - name: log
              mountPath: /var/log
            - name: host-volume
              mountPath: /host
              readOnly: true
          resources:
            limits:
              memory: 300M
            requests:
              cpu: 100m
              memory: 150M
      volumes:
        - name: dev
          hostPath:
            path: /dev
        - name: host-docker-socket
          hostPath:
            path: /var/run/docker.sock
        - name: log
          hostPath:
            path: /var/log
        - name: host-volume
          hostPath:
            path: /
      tolerations:
        - effect: NoSchedule
          operator: Exists
        - effect: NoExecute
          operator: Exists
---
# Source: nri-bundle/charts/newrelic-logging/templates/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  namespace: platform
  labels:     
    app: newrelic-logging
    chart: newrelic-logging-1.4.6
    heritage: Helm
    release: newrelic-bundle
    app.kubernetes.io/name: newrelic-logging
  name: newrelic-bundle-newrelic-logging
  annotations:
spec:
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: newrelic-logging
      release: newrelic-bundle
  template:
    metadata:
      labels:
        app: newrelic-logging
        release: newrelic-bundle
        app.kubernetes.io/name: newrelic-logging
    spec:
      serviceAccountName: newrelic-bundle-newrelic-logging
      hostNetwork: true # This option is a requirement for the Infrastructure Agent to report the proper hostname in New Relic.
      dnsPolicy: ClusterFirstWithHostNet
      terminationGracePeriodSeconds: 10
      containers:
        - name: newrelic-logging
          image: "newrelic/newrelic-fluentbit-output:1.4.6"
          imagePullPolicy: "IfNotPresent"
          env:
            - name: ENDPOINT
              value: "https://log-api.newrelic.com/log/v1"
            - name: SOURCE
              value: "kubernetes"
            - name: LICENSE_KEY
              valueFrom:
                secretKeyRef:
                  name: newrelic-license-key
                  key: newrelic-license-key
            - name: CLUSTER_NAME
              value: nightstone
            - name: LOG_LEVEL
              value: "info"
            - name: LOG_PARSER
              value: "docker"
            - name: PATH
              value: "/var/log/containers/*.log"
            - name: K8S_LOGGING_EXCLUDE
              value: "Off"
          command:
            - /fluent-bit/bin/fluent-bit
            - -c
            - /fluent-bit/etc/fluent-bit.conf
            - -e
            - /fluent-bit/bin/out_newrelic.so
          volumeMounts:
            - name: fluent-bit-config
              mountPath: /fluent-bit/etc
            - name: var
              mountPath: /var
          resources:
            limits:
              cpu: 500m
              memory: 128Mi
            requests:
              cpu: 250m
              memory: 64Mi
      volumes:
        - name: fluent-bit-config
          configMap:
            name: newrelic-bundle-newrelic-logging-fluent-bit-config
        - name: var
          hostPath:
            path: /var
      tolerations:
        - effect: NoSchedule
          operator: Exists
        - effect: NoExecute
          operator: Exists
---
# Source: nri-bundle/charts/kube-state-metrics/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: newrelic-bundle-kube-state-metrics
  namespace: platform
  labels:
    app.kubernetes.io/name: kube-state-metrics
    helm.sh/chart: "kube-state-metrics-2.9.7"
    app.kubernetes.io/instance: "newrelic-bundle"
    app.kubernetes.io/managed-by: "Helm"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: kube-state-metrics
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kube-state-metrics
        app.kubernetes.io/instance: "newrelic-bundle"
    spec:
      hostNetwork: false
      serviceAccountName: newrelic-bundle-kube-state-metrics
      securityContext:
        fsGroup: 65534
        runAsGroup: 65534
        runAsUser: 65534
      containers:
      - name: kube-state-metrics
        args:

        - --collectors=certificatesigningrequests


        - --collectors=configmaps


        - --collectors=cronjobs


        - --collectors=daemonsets


        - --collectors=deployments


        - --collectors=endpoints


        - --collectors=horizontalpodautoscalers


        - --collectors=ingresses


        - --collectors=jobs


        - --collectors=limitranges


        - --collectors=mutatingwebhookconfigurations


        - --collectors=namespaces


        - --collectors=networkpolicies


        - --collectors=nodes


        - --collectors=persistentvolumeclaims


        - --collectors=persistentvolumes


        - --collectors=poddisruptionbudgets


        - --collectors=pods


        - --collectors=replicasets


        - --collectors=replicationcontrollers


        - --collectors=resourcequotas


        - --collectors=secrets


        - --collectors=services


        - --collectors=statefulsets


        - --collectors=storageclasses


        - --collectors=validatingwebhookconfigurations



        - --collectors=volumeattachments




        imagePullPolicy: IfNotPresent
        image: "quay.io/coreos/kube-state-metrics:v1.9.7"
        ports:
        - containerPort: 8080
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 5
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 5
          timeoutSeconds: 5
---
# Source: nri-bundle/charts/nri-kube-events/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: newrelic-bundle-nri-kube-events
  namespace: platform
  labels:
    app: nri-kube-events
    app.kubernetes.io/name: nri-kube-events
    helm.sh/chart: nri-kube-events-1.7.0
    app.kubernetes.io/instance: newrelic-bundle
    app.kubernetes.io/version: "1.4.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: nri-kube-events
  template:
    metadata:
      labels:
        app: nri-kube-events
        app.kubernetes.io/name: nri-kube-events
        helm.sh/chart: nri-kube-events-1.7.0
        app.kubernetes.io/instance: newrelic-bundle
        app.kubernetes.io/version: "1.4.0"
        app.kubernetes.io/managed-by: Helm
    spec:
      securityContext:
        runAsUser: 1000
        runAsNonRoot: true
      containers:
        - name: kube-events
          image: newrelic/nri-kube-events:1.4.0
          securityContext:
            privileged: false
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          imagePullPolicy: IfNotPresent
          args: ["-config", "/app/config/config.yaml", "-loglevel", "debug"]
          volumeMounts:
            - name: config-volume
              mountPath: /app/config
        - name: infra-agent
          image: newrelic/k8s-events-forwarder:1.15.2
          securityContext:
            privileged: false
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          ports:
            - containerPort: 8001
          env:
            - name: NRIA_LICENSE_KEY
              valueFrom:
                secretKeyRef:
                  name: newrelic-license-key
                  key: newrelic-license-key
          volumeMounts:
            - mountPath: /var/db/newrelic-infra/data
              name: tmpfs-data
            - mountPath: /var/db/newrelic-infra/user_data
              name: tmpfs-user-data
            - mountPath: /tmp
              name: tmpfs-tmp
      serviceAccountName: newrelic-bundle-nri-kube-events
      volumes:
        - name: config-volume
          configMap:
            name: newrelic-bundle-nri-kube-events-config
        - name: tmpfs-data
          emptyDir: {}
        - name: tmpfs-user-data
          emptyDir: {}
        - name: tmpfs-tmp
          emptyDir: {}
---
# Source: nri-bundle/charts/nri-metadata-injection/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: newrelic-bundle-nri-metadata-injection
  namespace: platform
  labels:
    app.kubernetes.io/name: nri-metadata-injection
    helm.sh/chart: nri-metadata-injection-1.3.5
    app.kubernetes.io/instance: newrelic-bundle
    app.kubernetes.io/version: "1.3.2"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: nri-metadata-injection
  template:
    metadata:
      labels:
        app.kubernetes.io/name: nri-metadata-injection
        helm.sh/chart: nri-metadata-injection-1.3.5
        app.kubernetes.io/instance: newrelic-bundle
        app.kubernetes.io/version: "1.3.2"
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: newrelic-bundle-nri-metadata-injection
      containers:
      - name: nri-metadata-injection
        image: "newrelic/k8s-metadata-injection:1.3.2"
        imagePullPolicy: "IfNotPresent"
        env:
        - name: clusterName
          value: nightstone
        volumeMounts:
        - name: tls-key-cert-pair
          mountPath: /etc/tls-key-cert-pair
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 1
        resources:
          limits:
            memory: 80M
          requests:
            cpu: 100m
            memory: 30M
      volumes:
      - name: tls-key-cert-pair
        secret:
          secretName: newrelic-bundle-nri-metadata-injection
---
# Source: nri-bundle/charts/nri-prometheus/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: newrelic-bundle-nri-prometheus
  namespace: platform
  labels:
    app.kubernetes.io/name: nri-prometheus
    helm.sh/chart: nri-prometheus-1.6.2
    app.kubernetes.io/instance: newrelic-bundle
    app.kubernetes.io/version: "2.4.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: nri-prometheus
  template:
    metadata:
      labels:
        app.kubernetes.io/name: nri-prometheus
        helm.sh/chart: nri-prometheus-1.6.2
        app.kubernetes.io/instance: newrelic-bundle
        app.kubernetes.io/version: "2.4.0"
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: nri-prometheus
      containers:
      - name: nri-prometheus
        image: newrelic/nri-prometheus:2.4.0
        args:
          - "--configfile=/etc/nri-prometheus/config.yaml"
        ports:
          - containerPort: 8080
        volumeMounts:
        - name: config-volume
          mountPath: /etc/nri-prometheus/
        env:
          - name: "LICENSE_KEY"
            valueFrom:
                secretKeyRef:
                  name: newrelic-license-key
                  key: newrelic-license-key
          - name: "BEARER_TOKEN_FILE"
            value: "/var/run/secrets/kubernetes.io/serviceaccount/token"
          - name: "CA_FILE"
            value: "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
      volumes:
        - name: config-volume
          configMap:
            name: newrelic-bundle-nri-prometheus-config
---
# Source: nri-bundle/charts/nri-metadata-injection/templates/job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: newrelic-bundle-nri-metadata-injection-job
  namespace: platform
  labels:
    app.kubernetes.io/name: nri-metadata-injection
    helm.sh/chart: nri-metadata-injection-1.3.5
    app.kubernetes.io/instance: newrelic-bundle
    app.kubernetes.io/version: "1.3.2"
    app.kubernetes.io/managed-by: Helm
  annotations:
    # Dynamic annotation to force helm to re-deploy the job on upgrades
    # See https://github.com/helm/helm/issues/7082
    helm-timestamp: "2021-04-01 23:22:20.36511 -0700 PDT m=+0.161190301"
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/name: nri-metadata-injection
        helm.sh/chart: nri-metadata-injection-1.3.5
        app.kubernetes.io/instance: newrelic-bundle
        app.kubernetes.io/version: "1.3.2"
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: newrelic-bundle-nri-metadata-injection
      containers:
      - name: nri-metadata-injection-job
        # This is a minimal kubectl image based on Alpine Linux that sings certificates using the k8s extension api server
        image: "newrelic/k8s-webhook-cert-manager:1.3.2"
        imagePullPolicy: "IfNotPresent"
        command: ["./generate_certificate.sh"]
        args:
          - "--service"
          - newrelic-bundle-nri-metadata-injection
          - "--webhook"
          - newrelic-bundle-nri-metadata-injection
          - "--secret"
          - newrelic-bundle-nri-metadata-injection
          - "--namespace"
          - platform
      restartPolicy: Never
  backoffLimit: 1
---
# Source: nri-bundle/charts/nri-metadata-injection/templates/mutationwebhookconfiguration.yaml
apiVersion: admissionregistration.k8s.io/v1beta1
kind: MutatingWebhookConfiguration
metadata:
  name: newrelic-bundle-nri-metadata-injection
  labels:
    app.kubernetes.io/name: nri-metadata-injection
    helm.sh/chart: nri-metadata-injection-1.3.5
    app.kubernetes.io/instance: newrelic-bundle
    app.kubernetes.io/version: "1.3.2"
    app.kubernetes.io/managed-by: Helm
webhooks:
- name: metadata-injection.newrelic.com
  clientConfig:
    service:
      name: newrelic-bundle-nri-metadata-injection
      namespace: platform
      path: "/mutate"
    caBundle: ""
  rules:
  - operations: [ "CREATE" ]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods"]
  failurePolicy: Ignore

  timeoutSeconds: 30
